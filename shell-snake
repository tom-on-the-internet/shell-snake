#!/bin/sh

# The following line tells my linter to ignore the way I'm using printf:
# shellcheck disable=2059

# Hello!
#
# This is the classic game of snake.
#
# I have tried to write it so that it will run on most shells
# and so that it does not rely on many other applications. In other words,
# I'm trying to make this game portable and light.
#
# Currently, this program relies on:
# - stty. I use this for handling input and getting terminal dimensions.
# - dd. I use this for reading from stdin in the weird way I need to.
# - the $RANDOM variable. I could use awk to be more POSIX compliant, but the $RANDOM variable feels lighter.

# Constants
COLOR_BLUE='\e[1;34m'
COLOR_GREEN='\e[1;32m'
COLOR_MAGENTA='\e[1;35m'
COLOR_NEUTRAL='\e[0m'
COLOR_RED='\e[1;31m'
COLOR_YELLOW='\e[1;33m'
ESCAPE_CHAR=$(printf '\033')
MIN_NUM_COLUMNS=10
MIN_NUM_LINES=10
TURN_DURATION=1 # in tenths of a second
TERMINAL_SIZE=$(stty size)
NUM_COLUMNS="${TERMINAL_SIZE##* }"
NUM_LINES="${TERMINAL_SIZE%% *}"

if [ "$NUM_LINES" -lt "$MIN_NUM_LINES" ] || [ "$NUM_COLUMNS" -lt "$MIN_NUM_COLUMNS" ]; then
  printf 'Error: Your terminal size is too small.\n' >&2
  exit 1
fi

if ! type stty > /dev/null 2>&1; then
  printf 'Error: stty is required\n' >&2
  exit 1
fi

# read_chars reads a given number of character ($2) to a variable ($1)
# Because of our use of stty, read_char only waits a very short amount of time
# before returning.
read_chars() {
  eval "$1=\$(dd bs=1 count=$2 2>/dev/null)"
}

# handle_input is responsible for parsing and acting on user input.
handle_input() {
  read_chars key 1

  # if the input is the escape character we want to read two more characters
  # and then get the second of those characters.
  # Ex: pressing q has no escape character, so the key is simply q.
  # Ex: pressing up gives ^[[A. Removing the escape character, we have [A, which we shorten to A.
  if [ "$key" = "$ESCAPE_CHAR" ]; then
    read_chars key 2
    key="${key##*[}"
  fi

  case $key in
    A) direction='up' ;;
    B) direction='down' ;;
    C) direction='right' ;;
    D) direction='left' ;;
    q) on_exit ;;
    p) toggle_pause ;;
  esac
}

# get_random_number gets a random integer from the inclusive range of $1 (min) to $2 (max)
# I am using the $RANDOM variable which is not in part of POSIX, but seems well supported.
get_random_number() {
  min=$1
  max=$2
  # shellcheck disable=3028
  printf $((min + RANDOM % (1 + max - min)))
}

# get_random_position gets a random position within the useable part of the
# screen. That is, it doesn't get a position in the wall.
get_random_position() {
  line=$(get_random_number 2 $((NUM_LINES - 1)))
  column=$(get_random_number 2 $((NUM_COLUMNS - 1)))
  printf "$line,$column"
}

# get_random_free_position not on snake finds a position that is free.
get_random_free_position() {
  # loop to make sure block doesn't land on body
  while true; do
    on_body=0
    random_position=$(get_random_position)

    # 2,2 is a reserved position for adding new snake parts
    if [ "$random_position" = '2,2' ]; then
      on_body=1
    fi

    # check if position is on snake
    for body_position in $snake; do
      if [ "$random_position" = "$body_position" ]; then
        on_body=1
        break
      fi
    done

    # check if position is on block
    for block_position in $blocks; do
      if [ "$random_position" = "$block_position" ]; then
        on_body=1
        break
      fi
    done

    if [ "$on_body" = 0 ]; then
      break
    fi
  done

  printf "$random_position"
}

# get_center_position gets the middle position of the screen.
# This is where we start the snake.
get_center_position() {
  line=$((NUM_LINES / 2))
  column=$((NUM_COLUMNS / 2))
  printf "$line,$column"
}

# show_alternate_screen shows the alternate screen buffer where the game is played
# This buffer operates independently of the main buffer. This ensures we don't
# wreck the player's terminal.
show_alternate_screen() {
  printf '\033[?1049h\033[2J\033[H'
}

# hide_alternate_screen hides the alternate screen buffer.
# We do this after the game has completed.
hide_alternate_screen() {
  printf '\033[2J\033[H\033[?1049l'
}

# move_cursor moves the cursor to a line ($1) and column ($2)
# This is how we move around to draw things.
move_cursor() {
  printf "\033[$1;$2H"
}

hide_cursor() {
  printf "\033[?25l"
}

show_cursor() {
  printf "\033[?25h"
}

# move_snake moves the snake to a new location, both in terms of state (the snake variable)
# and on the screen itself.
# Moving the snake means removing its tail and adding a new head. We don't have to redraw the whole snake.
move_snake() {
  printf "$COLOR_GREEN"

  # get new location for head
  snake_head="${snake%% *}"
  line="${snake_head%%,*}"
  column="${snake_head##*,}"

  # draw old head as a body segment because it is no longer the head
  move_cursor "$line" "$column"
  printf '⚬'

  case $direction in
    up) line=$((line - 1)) ;;
    down) line=$((line + 1)) ;;
    right) column=$((column + 1)) ;;
    left) column=$((column - 1)) ;;
  esac

  # the new head of the snake!
  snake_head="$line,$column"

  # draw the new head
  move_cursor "$line" "$column"

  case $direction in
    up) printf '▲' ;;
    down) printf '▼' ;;
    right) printf '▶' ;;
    left) printf '◀' ;;
  esac

  # add the new head to the snake
  snake="$snake_head $snake"

  # and remove tail from the board
  snake_tail="${snake##* }"
  line="${snake_tail%%,*}"
  column="${snake_tail##*,}"
  move_cursor "$line" "$column"
  printf ' '

  # and remove tail from snake itself
  snake=${snake% *}

  printf "$COLOR_NEUTRAL"
}

# draw_wall draws the wall around the edge of the screen
# We accept a color ($1) to decide how to color the wall.
# The wall is blue at first, and red when the game ends.
draw_wall() {
  printf "$1"

  # Draw top and bottom border
  i=0
  while [ $i -le "$NUM_COLUMNS" ]; do
    move_cursor 1 $i
    printf '█'
    move_cursor "$NUM_LINES" $i
    printf '█'
    i=$((i + 1))
  done

  # Draw left and right border
  i=0
  while [ $i -le "$NUM_LINES" ]; do
    move_cursor $i 1
    printf '█'
    move_cursor $i "$NUM_COLUMNS"
    printf '█'
    i=$((i + 1))
  done
  printf "$COLOR_NEUTRAL"
}

# draw_score at the top of the screen
draw_score() {
  printf "$COLOR_YELLOW"
  move_cursor 1 5
  printf " SCORE: $score "
  printf "$COLOR_NEUTRAL"
}

check_hit_wall() {
  snake_head="${snake%% *}"

  line="${snake_head%%,*}"
  column="${snake_head##*,}"

  if [ "$line" = 1 ] || [ "$line" = "$NUM_LINES" ] || [ "$column" = 1 ] || [ "$column" = "$NUM_COLUMNS" ]; then
    on_game_over
  fi
}

add_food() {
  printf "$COLOR_YELLOW"

  food_position=$(get_random_free_position)

  line="${food_position%%,*}"
  column="${food_position##*,}"

  move_cursor "$line" "$column"
  printf '☺'

  printf "$COLOR_NEUTRAL"
}

add_block() {
  printf "$COLOR_BLUE"

  block_position=$(get_random_free_position)
  blocks="$blocks $block_position"

  line="${block_position%%,*}"
  column="${block_position##*,}"

  move_cursor "$line" "$column"
  # printf '█'
  printf '■'

  printf "$COLOR_NEUTRAL"
}

# add_to_snake is used to add a segment to the snake.
# The position doesn't matter as it is the last segment and will be removed
# as soon as the snake moves.
add_to_snake() {
  snake="$snake 2,2"
}

check_eat_food() {
  snake_head="${snake%% *}"

  if [ "$snake_head" = "$food_position" ]; then
    add_food
    if [ "$danger_mode" = 1 ]; then
      add_block
    fi
    add_to_snake
    score=$((score + 1))
    draw_score
  fi
}

check_hit_self() {
  snake_head="${snake%% *}"
  rest_of_snake=${snake#* }

  if [ "$snake_head" = "$rest_of_snake" ]; then
    return
  fi

  for body_position in $rest_of_snake; do
    if [ "$snake_head" = "$body_position" ]; then
      on_game_over
    fi
  done
}

check_hit_block() {
  snake_head="${snake%% *}"

  for block in $blocks; do
    if [ "$snake_head" = "$block" ]; then
      on_game_over
    fi
  done
}

# on_game_over is called when the game ends due to a collision
# Basically, we turn things red and wait a couple seconds before
# exiting the game.
on_game_over() {
  draw_wall "$COLOR_RED"
  draw_score

  # red head
  snake_head="${snake%% *}"

  line="${snake_head%%,*}"
  column="${snake_head##*,}"

  move_cursor "$line" "$column"

  printf "$COLOR_RED"
  case $direction in
    up) printf '▲' ;;
    down) printf '▼' ;;
    right) printf '▶' ;;
    left) printf '◀' ;;
  esac
  printf "$COLOR_NEUTRAL"

  sleep 2
  on_exit
}

# on_enter handles setting up the screen for the game
# and ensuring we can exit gracefully
on_enter() {
  hide_cursor
  show_alternate_screen

  # trap SIGINT and run on_exit to ensure we clean things up properly.
  trap 'on_exit' INT
}

toggle_pause() {
  if [ "$paused" = 0 ]; then
    paused=1
  else
    paused=0
  fi
}

# on_exit handles tidying up the game and showing
# the ending screen in the main terminal buffer.
on_exit() {
  hide_alternate_screen
  show_cursor
  stty icanon echo
  printf "$COLOR_GREEN"

  # snake art by Jennifer E. Swofford
  cat << "EOF"

                      __    __    __    __
                     /  \  /  \  /  \  /  \
____________________/  __\/  __\/  __\/  __\_____________________________
___________________/  /__/  /__/  /__/  /________________________________
                   | / \   / \   / \   / \  \____
                   |/   \_/   \_/   \_/   \    o \
                                           \_____/--<
EOF
  printf "$COLOR_NEUTRAL"
  printf "\n\nThanks for playing ${COLOR_GREEN}Shell Snake${COLOR_NEUTRAL}!\n\n"
  printf "This game was made by me, ${COLOR_MAGENTA}Tom${COLOR_NEUTRAL}.\n"
  printf "You can contact me at ${COLOR_YELLOW}tom@tomontheinternet.com${COLOR_NEUTRAL}\n\n"
  printf "Score: ${COLOR_YELLOW}$score${COLOR_NEUTRAL}   ${COLOR_GREEN}◀⚬⚬⚬${COLOR_NEUTRAL}\n\n"
  exit
}

show_help() {
  printf "Shell Snake is the classic game of snake, in your shell.\n\n"
  printf "Use the arrow keys to move. Hold them down to move faster.\n\n"
  printf "Press 'q' to quit.\n"
  printf "Press 'p' to pause.\n\n"
  printf "I've added a \"danger\" mode that you can try with -d.\n\n"
  printf "I hope where ever you are, you're having a good day!\n\n"
  printf "Tom\n"
}

# Game variables that we treat as globals
# (All variables in this script are actually global, but these are the ones we expect to be used as globals)
direction='up'
food_position='' # set below in add_food
score=0
snake=$(get_center_position)
blocks=''
danger_mode=0
paused=0

while :; do
  case $1 in
    -h | --help)
      show_help
      exit
      ;;
    -d | --danger)
      danger_mode=1
      ;;
    --) # End of all options.
      shift
      break
      ;;
    -?*)
      printf 'SNAKE ERROR: Unknown option: %s\n' "$1" >&2
      exit 1
      ;;
    *) # Default case: If no more options then break out of the loop.
      break ;;
  esac

  shift
done

# sets the terminal to not echo input
# and to only wait for $TURN_DURATION tenths of a second
# when waiting for input.
stty -icanon -echo time $TURN_DURATION min 0

on_enter

add_food
draw_wall "$COLOR_BLUE"
draw_score

# Game loop
while true; do
  if [ "$paused" = 0 ]; then
    move_snake
    check_hit_wall
    check_hit_block
    check_hit_self
    check_eat_food
  fi
  handle_input
done
